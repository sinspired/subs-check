# --- .goreleaser.yaml ---

version: 2

before:
  hooks:
    - go mod tidy

release:
  # 自动检测是否为预发布版本（例如，tag 中包含 -rc, -beta 等）
  prerelease: auto

# 构建配置
builds:
  - id: subs-check
    # 启用 CGO_ENABLED=0 来创建静态链接的二进制文件
    env:
      - CGO_ENABLED=0
    # 目标操作系统
    goos:
      - linux
      - windows
      - darwin
    # 目标 CPU 架构
    goarch:
      - amd64
      - arm64
      - arm
      - "386"
    # 为 arm 架构指定版本
    goarm:
      - "7"
    # 忽略不支持的平台组合
    ignore:
      - goos: darwin
        goarch: arm
      - goos: windows
        goarch: arm
      - goos: darwin
        goarch: "386"
    # 使用 Git 提交的时间戳作为模块的时间戳，确保可复现构建
    mod_timestamp: "{{ .CommitTimestamp }}"
    # 构建标志
    flags:
      - -trimpath
    # 链接器标志，用于注入版本信息并减小二进制文件大小
    ldflags:
      - -s -w -X main.Version={{ .Version }} -X main.CurrentCommit={{ .ShortCommit }}

# 归档配置（用于创建 .tar.gz 和 .zip 文件）
archives:
  - formats:
      - tar.gz
    # 自定义归档文件的命名模板
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else if eq .Arch "arm64" }}aarch64
      {{- else if eq .Arch "arm" }}armv7
      {{- else }}{{ .Arch }}{{ end }}
    # 针对 Windows 系统，覆盖打包格式为 zip
    format_overrides:
      - goos: windows
        formats: zip

dockers_v2:
  # You can have multiple Docker images.
  - #
    # ID of the image, needed if you want to filter by it later on (e.g. on custom publishers).
    # Default: project name
    # id: subs-check

    # Path to the Dockerfile (from the project root).
    #
    # Default: 'Dockerfile'.
    # Templates: allowed.
    dockerfile: Dockerfile.goreleaser

    # IDs to filter the binaries/packages.
    #
    # Make sure to only include the IDs of binaries you want to `COPY` in your
    # Dockerfile.
    #
    # If you include IDs that don't exist or are not available for the current
    # architecture being built, the build of the image will be skipped.
    # ids:
    #   - subs-check

    # Image names.
    #
    # Empty image names are ignored.
    #
    # Templates: allowed.
    images:
      - "{{ .Env.DOCKERHUB_USERNAME }}/{{ .ProjectName }}"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}"

    # Tag names.
    #
    # Empty tags are ignored.
    #
    # Templates: allowed.
    tags:
      - "v{{ .Version }}"
      - "{{ if .Prerelease }}nightly{{ end }}"
      - "{{ if not .Prerelease }}latest{{ end }}"

    # If your Dockerfile copies files other than binaries and packages,
    # you should list them here as well.
    # Note that GoReleaser will create the same structure inside a temporary
    # directory, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the directory in which
    # GoReleaser is being run (usually the repository root directory).
    # This field does not support wildcards, you can add an entire directory here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    # extra_files:
    #   - config.yml

    # Labels to be added to the image.
    #
    # Items with empty keys or values will be ignored.
    #
    # Templates: allowed.
    labels:
      "org.opencontainers.image.description": "高性能[测活、测速、媒体检测]代理检测筛选工具，支持100-1000高并发低占用运行，大幅减少数倍检测时间。"
      "org.opencontainers.image.created": "{{.Date}}"
      "org.opencontainers.image.name": "{{.ProjectName}}"
      "org.opencontainers.image.revision": "{{.FullCommit}}"
      "org.opencontainers.image.version": "{{.Version}}"
      "org.opencontainers.image.source": "{{.GitURL}}"
      "org.opencontainers.image.authors": "sinspired"
      "org.opencontainers.image.vendor": "sinspired"
      "org.opencontainers.image.documentation": "https://github.com/sinspired/subs-check/wiki"

    # Annotations to be added to the image.
    #
    # Items with empty keys or values will be ignored.
    #
    # Templates: allowed.
    # annotations:
    #   "foo": "bar"
    #   "project": "{{.ProjectName}}"
    #   "org.opencontainers.image.description": "高性能[测活、测速、媒体检测]代理检测筛选工具，支持100-1000高并发低占用运行，大幅减少数倍检测时间。"

    # Platforms to build.
    #
    # Default: [ linux/amd64 linux/arm64 ]
    platforms:
      - linux/amd64
      - linux/arm64
      - linux/arm/v7

    # Additional `--build-arg`s to be passed.
    #
    # Templates: allowed.
    # build_args:
    #   FOO: bar

    # Arbitrary flags to pass to the build command.
    #
    # Note: use this at your own risk.
    # Note: flags must have the `=` sign between flag name and value.
    #
    # Templates: allowed.
    # flags:
    #   - "--ulimit=10"

    # Retry configuration.
    # retry:
    #   # Attempts of retry.
    #   #
    #   # Default: 10.
    #   attempts: 5

    #   # Delay between retry attempts.
    #   #
    #   # Default: 10s.
    #   delay: 5s

    #   # Maximum delay between retry attempts.
    #   #
    #   # Default: 5m.
    #   max_delay: 2m

# 更新日志（Changelog）的配置
changelog:
  sort: asc
  filters:
    # 排除不需要展示在 changelog 中的提交信息
    exclude:
      - "^docs:"
      - "^test:"
      - "^chore:"
      - Merge pull request
      - Merge branch
